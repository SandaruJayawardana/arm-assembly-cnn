#include <iostream>
#include <stdio.h>
void a(float *start,int *x,float *con,float *kStart){
asm(" push {r4,r5,r6,r7,r8,r9,r10,r12}; vpush {s16-s29}; mov r10,#0; vmov s6,r10; ldr r2,[r2]; vmov s7,r2; ldr r7,[r1],#+4; ldr r1,[r1];  mov r9,r3; add r9,r9,#108; push {r9}; mov r6,r0; mov r4,#2; sub r0,r7,#8; LSR r0,r0,#3; mov r2,#1; and r2,r2,r0; cmp r10,r2; bne pad_ea;  str r10,[r9],#+4; str r10,[r9],#+4; str r10,[r9],#+4; pad_a:; str r10,[r9],#+4; str r10,[r9],#+4; cmp r0,r4; add r4,r4,#2; bne pad_a; b pad_exi; pad_ea:; sub r0,r0,#1; str r10,[r9],#+4; str r10,[r9],#+4; str r10,[r9],#+4; str r10,[r9],#+4; pad_b:; str r10,[r9],#+4; str r10,[r9],#+4; cmp r0,r4; add r4,r4,#2; bne pad_b; pad_exi:; layerr:; mov r4,#16; mov r5,#16; vldmia r3!,{s20-s28}; conv:; mov r8,r6; vldmia r8,{s16-s18}; add r8,r8,r7; vldmia r8!,{s19}; vmul.f32 q3,q4,q5; vldmia r8,{s16-s17}; sub r8,r8,#4; add r8,r8,r7; vldmia r8!,{s18-s19}; vfma.f32 q3,q4,q6; vldr s16,[r8]; vmul.f32 s16,s16,s28; vadd.f32 s0,s12,s13; vadd.f32 s0,s0,s14; vadd.f32 s0,s0,s15; vadd.f32 s0,s0,s16; add r8,r6,#4; vldmia r8,{s16-s18}; add r8,r8,r7; vldmia r8!,{s19}; vmul.f32 q3,q4,q5; vldmia r8,{s16-s17}; sub r8,r8,#4; add r8,r8,r7; vldmia r8!,{s18-s19}; vfma.f32 q3,q4,q6; vldr s16,[r8]; vmul.f32 s16,s16,s28; vadd.f32 s1,s12,s13; vadd.f32 s1,s1,s14; vadd.f32 s1,s1,s15; vadd.f32 s1,s1,s16; add r8,r6,r7; vldmia r8,{s16-s18}; add r8,r8,r7; vldmia r8!,{s19}; vmul.f32 q3,q4,q5; vldmia r8,{s16-s17}; sub r8,r8,#4; add r8,r8,r7; vldmia r8!,{s18-s19}; vfma.f32 q3,q4,q6; vldr s16,[r8]; vmul.f32 s16,s16,s28; vadd.f32 s2,s12,s13; vadd.f32 s2,s2,s14; vadd.f32 s2,s2,s15; vadd.f32 s2,s2,s16; add r8,r6,r7; add r8,r8,#4; vldmia r8,{s16-s18}; add r8,r8,r7; vldmia r8!,{s19}; vmul.f32 q3,q4,q5; vldmia r8,{s16-s17}; sub r8,r8,#4; add r8,r8,r7; vldmia r8!,{s18-s19}; vfma.f32 q3,q4,q6; vldr s16,[r8]; vmul.f32 s16,s16,s28; vadd.f32 s3,s12,s13; vadd.f32 s3,s3,s14; vadd.f32 s3,s3,s15; vadd.f32 s3,s3,s16; vstr s0,[r9]; add r9,r9,#4; vstr s1,[r9]; add r9,r9,#4; vstr s2,[r9]; add r9,r9,#4; vstr s3,[r9]; add r9,r9,#4; cmp r4,r7; beq j_d; add r4,r4,#8;  add r6,r6,#8; b conv; j_d:; cmp r5,r7; beq j_e; add r5,r5,#8; add r6,r6,r7; add r6,r6,#16; mov r4,#16; b conv; j_e:; cmp r1,r10; add r6,r6,r7,LSL #1; add r6,r6,#16; add r10,r10,#1; bgt layerr; pop {r3}; mov r0,r3; mov r10,#0; sub r2,r7,#8;  mov r9,r2,LSR#3; mul r2,r2,r9,LSL #1; mov r5,r2,LSR #4; mov r6,#2; mov r12,#2; mov r8,#0; mov r5,r5,LSR #1; summ_b:; mov r4,r3; vldmia r4,{s24-s31}; summ_a:; add r4,r4,r2; vldmia r4,{s16-s23}; vadd.f32 q4,q4,q6; vadd.f32 q5,q5,q7; cmp r1,r12;  add r12,r12,#1; bne summ_a; vcmp.f32 s16,s6; vmrs APSR_nzcv,fpscr; bge skip_a; vmul.f32 s16,s16,s7; skip_a:; vcmp.f32 s17,s6; vmrs APSR_nzcv,fpscr; bge skip_b; vmul.f32 s17,s17,s7; skip_b:; vcmp.f32 s18,s6; vmrs APSR_nzcv,fpscr; bge skip_c; vmul.f32 s18,s18,s7; skip_c:; vcmp.f32 s19,s6; vmrs APSR_nzcv,fpscr; bge skip_d; vmul.f32 s19,s19,s7; skip_d:; vcmp.f32 s20,s6; vmrs APSR_nzcv,fpscr; bge skip_e; vmul.f32 s20,s20,s7; skip_e:; vcmp.f32 s21,s6; vmrs APSR_nzcv,fpscr; bge skip_f; vmul.f32 s21,s21,s7; skip_f:; vcmp.f32 s22,s6; vmrs APSR_nzcv,fpscr; bge skip_g; vmul.f32 s22,s22,s7; skip_g:; vcmp.f32 s23,s6; vmrs APSR_nzcv,fpscr; bge skip_h; vmul.f32 s23,s23,s7; skip_h:; vcmp.f32 s16,s17; vmrs APSR_nzcv,fpscr; bgt j_a; vcmp.f32 s18,s17; vmrs APSR_nzcv,fpscr; bgt j_b; vcmp.f32 s19,s17; vmrs APSR_nzcv,fpscr; bgt j_c; vstr s1,[r0]; b j_me; j_a:; vcmp.f32 s18,s16; vmrs APSR_nzcv,fpscr; bgt j_b; vcmp.f32 s19,s16; vmrs APSR_nzcv,fpscr; bgt j_c; vstr s16,[r0]; b j_me; j_b:; vcmp.f32 s19,s18; vmrs APSR_nzcv,fpscr; bgt j_c; vstr s18,[r0]; b j_me; j_c:; vstr s19,[r0]; j_me:; add r9,r9,#4; add r8,r8,#1; cmp r9,r8;  bne skip_p; str r10,[r0],#+4; str r10,[r0],#+4; mov r8,#0; skip_p:; vcmp.f32 s20,s21; vmrs APSR_nzcv,fpscr; bgt j_a_b; vcmp.f32 s22,s21; vmrs APSR_nzcv,fpscr; bgt j_b_b; vcmp.f32 s23,s21; vmrs APSR_nzcv,fpscr; bgt j_c_b; vstr s21,[r0]; b j_me_b; j_a_b:; vcmp.f32 s22,s20; vmrs APSR_nzcv,fpscr; bgt j_b_b; vcmp.f32 s23,s20; vmrs APSR_nzcv,fpscr; bgt j_c_b; vstr s20,[r0]; b j_me_b; j_b_b:; vcmp.f32 s23,s22; vmrs APSR_nzcv,fpscr; bgt j_c_b; vstr s22,[r0]; b j_me_b; j_c_b:; vstr s22,[r0]; j_me_b:; add r9,r9,#4; add r8,r8,#1; cmp r9,r8;  bne skip_p_b; str r10,[r0],#+4; str r10,[r0],#+4; mov r8,#0; skip_p_b:; add r6,r6,#2; cmp r5,r6; add r3,r3,#16; bge summ_b; mov r10,#1; and r9,r9,r10; cmp r10,r9; bne skip_last; mov r4,r3; vldmia r4,{s24-s27}; summ_a_b:; add r4,r4,r2; vldmia r4,{s16-s19}; vadd.f32 q4,q4,q6; cmp r1,r7;  add r7,r7,#1; bne summ_a_b; vcmp.f32 s16,s6; vmrs APSR_nzcv,fpscr; bge skip_i; vmul.f32 s16,s16,s7; skip_i:; vcmp.f32 s17,s6; vmrs APSR_nzcv,fpscr; bge skip_j; vmul.f32 s17,s17,s7; skip_j:; vcmp.f32 s18,s6; vmrs APSR_nzcv,fpscr; bge skip_k; vmul.f32 s18,s18,s7; skip_k:; vcmp.f32 s19,s6; vmrs APSR_nzcv,fpscr; bge skip_l; vmul.f32 s19,s19,s7; skip_l:; vcmp.f32 s16,s17; vmrs APSR_nzcv,fpscr; bgt j_a_c; vcmp.f32 s18,s17; vmrs APSR_nzcv,fpscr; bgt j_b_c; vcmp.f32 s19,s17; vmrs APSR_nzcv,fpscr; bgt j_c_c; vstr s1,[r0]; b j_me_c; j_a_c:; vcmp.f32 s18,s16; vmrs APSR_nzcv,fpscr; bgt j_b_c; vcmp.f32 s19,s16; vmrs APSR_nzcv,fpscr; bgt j_c_c; vstr s16,[r0]; b j_me_c; j_b_c:; vcmp.f32 s19,s18; vmrs APSR_nzcv,fpscr; bgt j_c_c; vstr s18,[r0]; b j_me_c; j_c_c:; vstr s19,[r0]; j_me_c:; add r9,r9,#4; skip_last:; mov r4,#2; mov r10,#0; sub r0,r7,#8; LSR r0,r0,#3; mov r2,#1; and r2,r2,r0; cmp r10,r2; bne pad_ea_b; str r10,[r0],#+4; str r10,[r0],#+4; str r10,[r0],#+4; pad_a_b:; str r10,[r0],#+4; str r10,[r0],#+4; cmp r0,r4; add r4,r4,#2; bne pad_a_b; b pad_exi_b; pad_ea_b:; sub r0,r0,#1; str r10,[r0],#+4; str r10,[r0],#+4; str r10,[r0],#+4; str r10,[r0],#+4; pad_b_b:; str r10,[r0],#+4; str r10,[r0],#+4; cmp r0,r4; add r4,r4,#2; bne pad_b_b; pad_exi_b:; pop {r4,r5,r6,r7,r8,r9,r10,r12}; vpop {s16-s29};");
}

int main()
{

 float con=0.1;
 float img1[36] = {1,2,0,1,2,0,3,4,0,3,4,0,0,0,0,0,0,0,3,4,0,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,0,1,3,0,6,7,0,6,7,0,0,0,0,0,0,0,1,3,0,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,0,2,3,0,1,3,0,1,3,0,0,0,0,0,0,0,5,3,0,5,3,0,0,0,0,0,0,0,0,0,0,0,0,0};
 float kernal[200]={1,2,1,3,4,3,5,3,1,2,1,3,4,5,1,2,3,4,2,1,3,4,2,1,3,4,3};
 int r=24;
 int layers=3;
 int para[2]={24,3};

 a(&img1[0],&para[0],&con,&kernal[0]);
for (int i=0;i<27;i++){
	printf(" %f ",kernal[i]);
	}
	printf("\n \n \n");
	for (int j=0;j<4;j++){
		for (int i=0;i<4;i++){
			printf(" %f ",kernal[i+j*4+27]);
		}
		printf(" \n ");
	}
}